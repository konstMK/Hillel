<?php
/*
4. Спроектируйте класс для работы со строками, класс должен иметь как публичные так и приватные методы, право решение какие методы какими делать стоит за вами, но хорошее правило делать приватными только те методы которые будут использоваться внутри класса.

Список того что этот класс должен уметь:

а) Делать строку в верхний регистр

б) Заменять пробелы на + при это строка должна быть в верхнем регистре

в) Заменять О на 0 (ноль), I на 1 (один), S на $

г) Искать подстроку в строке (функция strstr http://php.net/manual/ru/function.strstr.php )

д) Создавать случайную строку из имеющегося набора букв (в нижнем регистре) и цифр и возвращать ее в верхний регистр

5. Напишите класс который должен уметь писать и читать данные из файла.

Варианты для усложнения жизни:

а) Создайте класс Logger который будет писать какие то события в файл (вспоминайте лекцию)

б) Создайте класс Messages который будет читать файлы с сообщениями (сообщения создайте в любом текстовом редакторе, или реализуйте запись их в классе Messages)

в) Перепишите все с наследованием класса который отвечает за работу с файлами если вы этого еще не сделали

6. Задание со звездочкой. Используя знания об абстрактных класса, интерфейсах, полиморфизме, опишите на PHP  велосипед, танк, автомобиль. Только структура, писать логику как это будет ездить и стрелять не надо*/
/*
* 1. Необходимо создать класс который будет уметь хранить и получать строку которую введет пользователь.
* Для реализации этого задание не забудьте создать пару методов один из которых буде записывать данные 
* в свойство класса, второй получать его.
* Варианты для развития:
* а) реализуйте функционал который будет записывать данные в свойство класса используя констурктор
* б) перепишите методы класса как статические
* */

class StringStatic
{
  public static $user_input;
    
  public static function setString($input)
  {
    self::$user_input = $input;
  }
  
  public static function getString()
  {
    return self::$user_input;
  }
  
}

class StringDynamic 
{
  public $user_input;
  
  public function __construct(string $input)
  {
    $this->user_input = $input;
  }
  
  public function getString()
  {
    return $this->user_input;
  }
}

StringStatic::setString('be or not to be');
echo StringStatic::getString() . "\n";

$dynamic  = new StringDynamic('Dynamic power');
echo $dynamic->getString();






